[rt,choice]=parallelProcessingSimulation();
%% -- NEUR1660 Final Project -- Parallel Processing Function (DDM Model)
% Last Update: April 20, 2022
% Ivo Su and Kaitlyn Mundy
% Usage: Drift Diffusion Model for parallel processing. The parallel 
    %%%  processing task has two different stimuli, both of which
    %%%  accumulate evidence at the same time.
% Inputs
    %%%  A: drift rate
    %%%  c: noise (usually value = 1)
    %%%  dt: time step rate
    %%%  y01: starting point for the first stimulus
    %%%  z1: Threshold for the first stimulus
    %%%  z2: Threshold for the second stimulus
    %%%  t0: Non-decision time
% Outputs
    %%% rt: predicted reaction times
    %%% correct: Predicted accuracy (number correct)
    %%% incorrect: Predicted number incorrect choices
    %%% both_correct: Predicted accurate response due to correct processing
    
%% Initial Simulation
% ~~ Parameters ~~
A = 1;
c = 1;
y1_0 = 0.3;
z1 = 0.5;
z2 = z1;
t0 = 0.25;
dt = 0.1;

% ~~ Simulate One Decision ~~
[rt, correct, both_correct] = parallelProcessingSimulation(A,c,y1_0,z1,dt)


% ~~ Simulation ~~
[rt_mean, rt_std, correct_mean, both_correct_mean] = parallelProcessingTrial(A,c,y1_0,z1,dt)


%% 

c=1; %noise
N=1000; %num trials
y01=0; %starting point
z1=0.4; %threshold
z2=0.9; %threshold for stimulus 2
T0=0.01; %non-decision time
dt=0.01; % time step


%%% Alter
A=0.1:0.2:4; % drift rate

for k=1:length(A)
    [percent_correct(k), avg_RT(k)] = SP_multiple_simulations(A(k),c,dt,y01,z1,z2,T0,N);
end

figure(1)
subplot(211)
plot(A,avg_RT, 'o')
ylabel('Reaction Time (s)')
subplot(212)
plot(A,percent_correct, 'o')
ylabel('Accuracy (%)')
xlabel('Drift Rate')
sgtitle('Stimulus 1 Drift Rate Impacts on Accuracy and RT')
